// **************************************************************************
// StoreGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names, unnecessary_brace_in_string_interps, unnecessary_lambdas, prefer_expression_function_bodies, lines_longer_than_80_chars, avoid_as, avoid_annotating_with_dynamic, no_leading_underscores_for_local_identifiers

mixin _$FormErrorStore on _FormErrorStore, Store {
  Computed<bool>? _$hasErrorsComputed;

  @override
  bool get hasErrors =>
      (_$hasErrorsComputed ??= Computed<bool>(() => super.hasErrors,
              name: '_FormErrorStore.hasErrors'))
          .value;

  late final _$usernameErrorAtom =
      Atom(name: '_FormErrorStore.usernameError', context: context);

  @override
  String? get usernameError {
    _$usernameErrorAtom.reportRead();
    return super.usernameError;
  }

  @override
  set usernameError(String? value) {
    _$usernameErrorAtom.reportWrite(value, super.usernameError, () {
      super.usernameError = value;
    });
  }

  late final _$passwordErrorAtom =
      Atom(name: '_FormErrorStore.passwordError', context: context);

  @override
  String? get passwordError {
    _$passwordErrorAtom.reportRead();
    return super.passwordError;
  }

  @override
  set passwordError(String? value) {
    _$passwordErrorAtom.reportWrite(value, super.passwordError, () {
      super.passwordError = value;
    });
  }

  late final _$_FormErrorStoreActionController =
      ActionController(name: '_FormErrorStore', context: context);

  @override
  void setUsernameError(String? error) {
    final _$actionInfo = _$_FormErrorStoreActionController.startAction(
        name: '_FormErrorStore.setUsernameError');
    try {
      return super.setUsernameError(error);
    } finally {
      _$_FormErrorStoreActionController.endAction(_$actionInfo);
    }
  }

  @override
  void setPasswordError(String? error) {
    final _$actionInfo = _$_FormErrorStoreActionController.startAction(
        name: '_FormErrorStore.setPasswordError');
    try {
      return super.setPasswordError(error);
    } finally {
      _$_FormErrorStoreActionController.endAction(_$actionInfo);
    }
  }

  @override
  String toString() {
    return '''
usernameError: ${usernameError},
passwordError: ${passwordError},
hasErrors: ${hasErrors}
    ''';
  }
}
